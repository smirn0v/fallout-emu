<chapter id="install">
<title>Download and installation</title>

<para>
You can download the ready for use binaries for pev that we call
pre-compiled binaries. This is the easiest way to start using pev,
although you may want to compile it in your environment if you feel
comfortable but that will require you to install dependencies,
some libraries headers and some programs to do the job.
</para>

<para>
If you choose to use the pre-compiled binaries (recommended for beginners), you
only need to download it from our download page. There pre-compiled binaries for
Windows, Linux packages in DEB and RPM format and Mac OS X. Linux users can also
use their packaging manager to install pev. Look for it in your repository but
make sure you have the latest pev version available first. ;)
</para>

<section id="binary">
<title>From pre-compiled binaries</title>

<section id="binlinux">
<title>On GNU/Linux</title>

<para>
For Debian-based flavors, download the DEB package and run::
</para>

<screen>
<prompt>$ </prompt><command>sudo dpkg -i pev-x.xx.deb</command>
</screen>

<para>
For Red Hat based flavors, download the RPM package and run:
</para>

<screen>
<prompt>$ </prompt><command>sudo rpm -i pev-x.xx.rpm</command>
</screen>

<para>For installing through your distribution repository, please check
its documentation.</para>

</section>

<section id="binwin">
<title>On Windows</title>
<para>
Just download the ZIP package and uncompress it in any directory you want.
You should be ready for using pev after that, calling the binaries from the Command Prompt.
You can also consider adding the pev's directory to PATH variable to make use of pev easier.
</para>

<tip><para>You don't need Cygwin for running pev in Windows. Cygwin is only needed if you
intent to compile pev by your own.</para></tip>

</section>

<section id="binmac">
<title>On Mac OS X</title>
<para>You can download the provided PKG or, for
<ulink url="http://www.macports.org/">macports</ulink> users, you can
run the following in terminal:</para>

<screen>
<prompt>$ </prompt><command>sudo port install pev</command>
</screen>

</section>

</section>

<section id="source">
<title>From the source code</title>

<para>
Go to <ulink url="http://pev.sourceforge.net" />, and download the tarball
named pev-x.xx.tar.gz, where x.xx is the version number you want.
</para>

<para>You can have the most up to date source code from the
<ulink url="https://github.com/merces/pev">pev repository on GitHub</ulink> (recommended).
If you have git installed, run the following:</para>

<prompt>$ </prompt> <command>git clone --recursive git://github.com/merces/pev.git</command>

<para>
Even without git installed, you can download a ZIP or tarball file from project web page
on GitHub.
</para>

<section id="complinux">
<title>Compiling on GNU/Linux</title>

<para>
Make sure you have the following dependencies installed and working properly:
</para>

<simplelist>
<member><ulink url="https://github.com/merces/libpe">libpe</ulink> (included if you've used the --recursive option of git command)</member>
<member>libssl (used for pehash and pesec)</member>
<member>libpcre (used for pestr)</member>
<member>gcc</member>
<member>make</member>
</simplelist>

<para>If you have downloaded the tarball, uncompress it with tar command:</para>

<screen>
<prompt>$ </prompt><command>tar xf pev-x.xx.tar.gz</command>
<prompt>$ </prompt><command>cd pev-x.xx</command>
</screen>
<para>If you've cloned git repository, go for compilation:</para>

<screen>
<prompt>$ </prompt><command>make</command>
<prompt># </prompt><command>make install</command> (root privileges needed)
</screen>

<para>
The commands above will compile libpe and all pev binaries. You can define
DEST and PREFIX variables if you need. For compiling libpe only, enter in its directory
and issue make command, as this:
</para>

<screen>
<prompt>$ </prompt><command>cd lib/libpe</command>
<prompt>$ </prompt><command>make</command>
</screen>

<para>To compile individual pev binaries, use:</para>
<screen>
<prompt>$ </prompt><command>cd src/</command>
<prompt>$ </prompt><command>make <replaceable>program</replaceable></command>
</screen>

<note>
<para>
In order to compile any pev binary you should compile and install libpe first.
</para>
</note>

</section>

<section id="compwin">
<title>Compiling in Windows (through Cygwin)</title>

<para>The first step is to download and install <ulink
url="http://cygwin.com/">Cygwin</ulink>. During the installation process,
you must select at minimum the following packages for installation:</para>

<simplelist>
<member>gcc (32-bit version)</member>
<member>binutils</member>
<member>make</member>
<member>zip</member>
<member>openssl-devel</member>
<member>libpcre-devel</member>
</simplelist>

<para>
You should follow the same compilation steps in GNU/Linux, replacing
"make install" by "make zip".
</para>

<screen>
<prompt>$ </prompt><command>make zip</command>
</screen>

<para>A file <emphasis>pev-x.xx.zip</emphasis> will be created and can be
extracted in any directory you choose. All pev toolks can be called directly from
Windows Command Prompt (<emphasis>cmd.exe</emphasis>). You can add the pev's directory
in %PATH% environment variable in order to call pev tools from anywhere.</para>

<warning><para>You cannot call "make install" under compilation in Cygwin.</para></warning>

</section>

<section id="composx">
<title>Compiling in OS X</title>
<para>We recommend you use one of the following package managers to install dependencies first when
compiling in OS X:</para>

<simplelist>
<member>MacPorts - http://www.macports.org</member>
<member>Homebrew - http://mxcl.github.com/homebrew</member>
</simplelist>

<para>For MacPorts, use:</para>

<screen>
<prompt>$ </prompt><command>sudo port install pcre</command>
<prompt>$ </prompt><command>make CFLAGS="-I/opt/local/include"</command>
</screen>

<para>For Homebrew, use:</para>

<screen>
<prompt>$ </prompt><command>brew install pcre</command>
<prompt>$ </prompt><command>make CFLAGS="-I/opt/local/include"</command>
</screen>

<para>The directories above may change depending on your package manager installation settings.</para>

</section>

<section id="compother">
<title>Compiling in other platforms</title>

<para>
As pev is written in standard C language, we encourage you to compile it in
different platforms and let us know about that. We believe pev can be compiled
in different platforms without any patches, but you should face some challenges with
the dependencies.
</para>

<para>
Past versions were compiled for Android, Solaris and other systems but current version
not yet. If you'd like to give a try, go ahead! ;)
</para>
</section>

<section id="compat">
<title>Output retro-compatibility</title>
<para>
For the version 0.70 the output format of readpe changed a little bit. If you have some
scripts calling pev and parsing the old 0.60 output format, you can define
a macro called LIBPE_ENABLE_OUTPUT_COMPAT_WITH_V06 before compilation, just like this:</para>

<screen>
<prompt>$ </prompt><command>DFLAGS+=-DLIBPE_ENABLE_OUTPUT_COMPAT_WITH_V06 make readpe</command>
</screen>
</section>

</section>

</chapter>
